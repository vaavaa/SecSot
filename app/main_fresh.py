import os

from telegram import Update, constants
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext, Application

from ollama import ChatResponse
from ollama import Client

from dotenv import load_dotenv

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN", "TOKEN")

if TOKEN=="TOKEN":
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN", "TOKEN")

async def start(update: Update, context: CallbackContext):
     print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫–∏ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è! üëç")


async def react_with_like(update: Update, context: CallbackContext):
    message = update.message
    chat_id = message.chat_id
    message_id = message.message_id

    try:
        # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é "–ª–∞–π–∫" (üëç)
        await context.bot.set_message_reaction(
            chat_id=chat_id,
            message_id=message_id,
            reaction=[constants.ReactionEmoji.EYES],
            is_big=False  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ True –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")


async def analyze_message(update: Update, context: CallbackContext):

    message_text = update.message.text or "–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç"

    if not message_text:
        return
    client = Client(
        host='http://192.168.68.120:11434',
    )
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Ollama
    try:
        response: ChatResponse = client.chat(model='llama3.1:latest', messages=[
            {
                'role': 'user',
                'content': f"–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ, –æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç: {message_text}",
            },
        ])
        print(f"–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç: {response['message']['content']}")
        if '–î–ê' in str(response['message']['content']).upper():
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ä–µ–∞–∫—Ü–∏–µ–π
            await react_with_like(update, context)

    except Exception as e:
        print(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {message_text} -- –æ—à–∏–±–∫–∞: {str(e)}")
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")


def main():
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.ALL, analyze_message))

    application.run_polling()


if __name__ == "__main__":
    print("Bot alive")
    main()